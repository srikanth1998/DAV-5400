# -*- coding: utf-8 -*-
"""proposal_done.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jRNqZha7NBvN5u17h-f9O9L7DevLH1UH

### ARTIFICIAL NEURAL NETWORK FOR STOCK PRICE PREDICTION

# 1.Abstract

Due to the stock markets' volatility, it is difficult to predict stock market prices with any degree of accuracy. AI prediction techniques have shown to be more effective at forecasting stock values with the introduction of machine learning and improved computational capabilities. In this study, the NSE TATA GLOBAL dataset was used to predict opening and closing prices using LSTM Neural Network techniques. The LSTM model receives as inputs financial data such as Open, Close, and Time of Stock. Standard strategic metrics like RMSE are used to evaluate the models. The low values of this indicator demonstrate the effectiveness of the models in forecasting stock closing price.

# 2.INTRODUCTION

Stock price prediction using machine learning techniques has a wide application nowadays in many companies such as Apple Inc., Amazon and Uber, as an analytical tool. This task applies machine learning techniques to develop a cost prediction model predicting returns on stock. This will therefore imply the LSTM neural network to predict stock price. This enables most companies in organising sales, manufacturing, servicing and/or assembling.

Application of AI advisors is getting improvised daily replacing the human advisors.

The majority of financial transactions nowadays are electronic and the total period taking it to execute a stock trade has been significantly reduced, this includes:
Algo Trading; an algorithmic trading basing on historical data, High-Frequency Trading; volumes of shares and stocks are sold and bought at very high speeds mechanically, and AI Managed Portfolios eg. AI-Powered ETFs and AI Stock Pickers among many more.

# RESEARCH QUESTIONS

1. Does the stock price flactuation in the market show during probability testing in the model?
2. Does the neural network have an accuracy value of 85% and above?
3. What is the probable epoch size to be used for checking value loss, accuracy and model performance in general?
4. Can a regression model be made from the research data used and is it effective for other statistical operations?
5. Do markets use Artificial Intelligence neural networks in stock market prediction?
6. Can the dataset be reshaped from long to wide format and vice versa?


The results from this test can be applied in checking trends, prices and stock market flactuation overtime; during high and low sentiment regime.

The datasets can also be used in checking losses and profits of a given market over time and how to improvements can be made.

# 3.Research Approach

To build this stock prediction model, data will be used from the NSE TATA GLOBAL dataset; from Tata Bevarages, from Tata Global Bevarages Limited, a National Stock Exchange from India. 
Using the link: https://www.quandl.com/data/NSE/TATAGLOBAL-Tata-Global-Beverages-Limited

The Turnover data will be collected from the source via web scraping method after registering as a member in the website which is free for non-commercial use, afterwhich permission to downloading and scraping the data is given.

This will also involve Total Trade Quantity Data in CSV format that is available from July 19 2010 to 4th January 2019 that was collected on daily basis.

The Libraries to be imported for use include:
 - numpy
 - matplotlib
 - pandas
 - keras
 - scikit-learn


**Methodology**
Data Description

The historical data was downloaded from the NSE TATA GLOBAL dataset from Tata Beverages, a National Stock Exchange from India. Tata Global Bevarages Limited. Use this URL to access the data: https://www.quandl.com/data/NSE/TATAGLOBAL-Tata-Global-Beverages-Limited. Web scraping was used to collect the Turnover data from the original source. The data includes stock-related details like High, Low, Open, Close, and Volume. The stock's only extracted prices are the opening and closing prices.

**LSTM Networks**
A specific class of RNN called LSTM Networks, or long short term memory networks, are able to learn long-term dependencies. They are incredibly effective at solving a wide range of issues. The long-term reliance issue is something that LSTM are intended to avoid. It retains data information for a long time.

**Results**
Root Mean Square Error (RMSE) is used to determine the final minimalized errors in the LSTM forecasted opening and closing prices in order to assess the performance of the models.
RMSE is calculated using the equation below.

RMSE = \sqrt{\frac{1}{n}\Sigma_{i=1}^{n}{\Big(\frac{d_i -f_i}{\sigma_i}\Big)^2}}

# 4.Exploratory Data Analysis

# Setup
We import all the **python** libraries required
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

"""## Data Acquisition/Import
We retrieve all dataset for the analysis.

**Api Data**
"""

import requests

#GET data from API=
url = 'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=N3AKAEZVXPVFCEWC'
r = requests.get(url)
api_data = r.json()

api_data=api_data['Weekly Time Series']
api_data

date = list(api_data.keys())
date

#CREAT-DATA_FRAME
stock_dataset_raw=pd.DataFrame(api_data)
stock_dataset_raw.head()

#Transpose DataFrame (swap rows and columns)
stock_dataset_api=stock_dataset_raw.T



se = pd.Series(date)
stock_dataset_api['Date'] = se.values

stock_dataset_api.shift(periods=2, axis="columns")
stock_dataset_api.head()

stock_dataset_api.info

stock_dataset_api.columns

#Rename Columns
new_col=['Open', 'High', 'Low', 'Close', 'Total Trade Quantity',"Date"]

stock_dataset_api.columns=new_col

stock_dataset_api

"""**Downloaded Data**"""

#Load dataset into pandas DataFrame

stock_dataset = pd.read_csv('stock_data.csv')
stock_dataset.head()

stock_dataset.columns

#INFO
stock_dataset.info()

"""## Data Cleaning
Data pre-processing,exploration,processing 
"""

#check Columns
stock_dataset.columns

#check Columns lenght
len(stock_dataset.columns)

#The dataset has 7 columns associated with time series 

stock_dataset.head()



"""# Visialize stock price flactuation#

"""

#Use matplotlib to visualize Opening Price VS Time & Closing -Price Vs Time
figure, axis =plt.subplots(1,2,figsize=(20,7))

axis[0].plot(stock_dataset['Open'],color='blue',label='Open')
axis[0].set_xlabel('Date',size=15)
axis[0].set_ylabel('Opening-Price',size=15)
axis[0].legend()

axis[1].plot(stock_dataset['Close'],color='yellow',label='Close')
axis[1].set_xlabel('Date',size=15)
axis[1].set_ylabel('Closing-Price',size=15)
axis[1].legend()

figure.show()



"""# 5.Data Preparation

**Data Processing**
"""

#API_DATA
stock_dataset_api

#API-DATA
# Filtering required columns-OPEN ,CLOSE a& TIME
stock_dataset_api = stock_dataset_api[['Date','Open','Close']] 
stock_dataset_api.head()

# Set Date as index Column  
#stock_dataset_api.set_index('Date',drop=True,inplace=True)
#stock_dataset_api.head()

#DOWLOADED
# Filtering required columns-OPEN ,CLOSE a& TIME
stock_dataset = stock_dataset[['Date','Open','Close']] 
stock_dataset.head()

# Set Date as index Column  
#stock_dataset.set_index('Date',drop=True,inplace=True)
#stock_dataset.head()



"""# API DATA & DOWNLOATED DATASET MERGE"""

frames = [stock_dataset, stock_dataset_api]

result = pd.concat(frames)
result

stock_dataset=result[['Date','Open','Close']] 
stock_dataset

# Set Date as index Column  
stock_dataset.set_index('Date',drop=True,inplace=True)
stock_dataset.head()

stock_dataset.size

"""# Data-Scaling
When using regression modeling, scaling the target value is a smart idea since it makes it simple for the model to learn and comprehend the issue.

Min-max scaler is good for scaling the data ton ensure that all attributes/features are standardized.
"""

from sklearn.preprocessing import MinMaxScaler
ms = MinMaxScaler()
stock_dataset[stock_dataset.columns] = ms.fit_transform(stock_dataset)

#check Scalled dataset
stock_dataset.head()





"""# Split the data into train, validation and test sets"""

#check Data_Length
data_len=len(stock_dataset)
data_len

#test_size
test_s = round(data_len * 0.25) # Selecting 25% for testing
test_s

test_dataset = stock_dataset[:test_s]
train_dataset  = stock_dataset[test_s:]

("TEST-DATA:",test_dataset.size,"TRAIN-DATA:",train_dataset.size)

"""
# Creating a sliding window
Create:

train_seq,train_label,test_seq,test_label."""

# Function to create sequence of data for training and testing

def create_seq_label(data):
  data_sequences = []
  data_labels = []
  start = 0

  for stop in range(50,len(data)): # Selecting 50 rows at a time
    data_sequences.append(data.iloc[start:stop])
    data_labels.append(data.iloc[stop])
    start += 1
  return (np.array(data_sequences),np.array(data_labels))

#

train_seq, train_label = create_seq_label(train_dataset)
test_seq, test_label = create_seq_label(test_dataset)

#check split data shapes
f"train_seq:{train_seq.shape} ,train_label:{train_label.shape},test_seq: {test_seq.shape},test_label: {test_label.shape}"



"""Investigative Analysis & Results

# Performing regression, correlation and hypothesis testing

# ***Building the Deep Learning Regression Model***
"""



#from keras import metrics
from keras.models import Sequential
from keras.layers import LSTM, Bidirectional,Dense, Dropout

#
train_seq.shape[1]

#check train seq shape
train_seq.shape[2]

#LSTM NET
stock_pred_model = Sequential()
stock_pred_model.add(LSTM(units=100, return_sequences=True, input_shape = (train_seq.shape[1], train_seq.shape[2])))
stock_pred_model.add(Dropout(0.1)) 
stock_pred_model.add(LSTM(units=100))
stock_pred_model.add(Dense(2))

#

stock_pred_model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])

#inspect model details
stock_pred_model.summary()



train_seq.shape

"""## *Fitting the dataset into the model and use for prediction*"""

stock_pred_model.fit(train_seq, train_label, epochs=100,validation_data=(test_seq, test_label), verbose=1)



"""# 6.Checking the model performance

# *Predict on  Test Data and Compute RMSE*
RMSE-Root-mean-square a measure of the differences between values predicted by a model and the values observed.
"""

from sklearn.metrics import mean_squared_error

predicted_train= stock_pred_model.predict(train_seq)
print(np.sqrt(mean_squared_error(train_label,predicted_train)))

predicted= stock_pred_model.predict(test_seq)
print(np.sqrt(mean_squared_error(test_label,predicted)))



test_predicted = stock_pred_model.predict(test_seq)
#check  ten predictions
test_predicted[:20]

#inverse transformation to get back the original value 
test_inverse_predicted = ms.inverse_transform(test_predicted) # Inversing scaling on predicted data
test_inverse_predicted[:20]

visual_data = pd.concat([stock_dataset.iloc[-776:].copy(),pd.DataFrame(test_inverse_predicted,columns=['Open-Predicted','Close-Predicted'],index=stock_dataset.iloc[-776:].index)], axis=1)

visual_data[['Open','Close']] = ms.inverse_transform(visual_data[['Open','Close']])
visual_data.head()

visual_data[['Open','Open-Predicted']].plot(figsize=(15,8))
plt.xticks(rotation=45)
plt.xlabel('DATE',size=20)
plt.ylabel('Stock-Price',size=20)
plt.title('ACTUAL-PRICE  vs OPEN-PRICE-Predicted',size=20)
plt.show()

"""# Neural network have an accuracy

Based on the predicion plot,accurracy of prediction is quit low.<40%
"""

visual_data[['Close','Close-Predicted']].plot(figsize=(15,8))
plt.xticks(rotation=45)
plt.xlabel('DATE',size=20)
plt.ylabel('Stock Price',size=20)
plt.title('Actual vs Predicted for CLOSE-PRICE',size=20)
plt.show()



"""RESEACH QUESTIONS ANSWERS

    1. Does the stock price flactuation in the market show during probability testing in the model?
    YES.This is clearly shown by the plot/graph of DATE VS CLOSE and OPEN.

    2. Does the neural network have an accuracy value of 85% and above?
    NO.The prediction accuracy is very low.As shown by Actual vs Predicted for CLOSE-PRICE and ACTUAL-PRICE  vs OPEN-PRICE-Predicted,the prediction is quit low.

    3. What is the probable epoch size to be used for checking value loss, accuracy and model performance in general?
    >60
    Reason being the model prediction remail constant.See Fitting the dataset into the model and use for prediction section.

    4. Can a regression model be made from the research data used and is it effective for other statistical operations
    YES.The model can be use modify or in original state to do other statistical operations.

    5. Do markets use Artificial Intelligence neural networks in stock market prediction
    YES & NO

    6. Can the dataset be reshaped from long to wide format and vice versa
    YES

**# 8.CONCLUSION**

Because stock values frequently fluctuate and depend on intricate factors, predicting stock market prices can be difficult. The stock's opening and closing prices are predicted using LSTM, which is also employed for comparison analysis. the RMSE-based comparison analysis. LSTM provides improved stock price prediction, according to RMSE. The best values achieved by the LSTM model give RMSE, according to the results (0.0076). In order to achieve potentially better results, deep learning models that take into account financial news in addition to financial parameters like a closing price, traded volume, and profit and loss statements may be developed for future work.
"""